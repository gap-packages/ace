
# .../src/make.linux, 17 Aug 14
#
# ACE et al make file for standard GNU/linux boxes.
# Usage example: make -f make.linux test3

# CC is the compiler to use, along with the 'standard' flags.  
# This is common to all the programmes.

CC ?= gcc
EXTRA_CFLAGS ?= -Wall -pedantic -std=c99

# Optional FLAGS, for ace and ace dependents, are
#   optimisation: -O0, -O1, -O2, -O3
#   memory model: -DB8S4C8, -DB8S4C5, -DB8S4C4, -DB4S4C4, -DB4S4C3, etc
#    clock model: -DCLK32 -DCLK64

#FLAGS = -O2 -DB8S8C8 -DCLK64
#FLAGS = -O2 -DB8S4C8 -DCLK64
#FLAGS = -O2 -DB8S4C5 -DCLK64
 FLAGS = -O2 -DB8S4C4 -DCLK64 $(EXTRA_CFLAGS)

#FLAGS = -O2 -DB8S4C5 -DCLK32
#FLAGS = -O2 -DB4S4C4 -DCLK32
#FLAGS = -O2 -DB4S4C3 -DCLK32

# ACE sources, neatly arranged into levels 2/1/0.

SRC2  = ace.c cmdloop.c parser.c postproc.c util2.c
SRC1  = control.c util1.c
SRC0  = coinc.c enum.c util0.c
SRC0A = enum00.inc enum01.inc enum02.inc

# ACE executable.

ace: al2.h $(SRC2) al1.h $(SRC1) al0.h $(SRC0) $(SRC0A)
	$(CC) $(FLAGS) -o ace $(SRC2) $(SRC1) $(SRC0)

# ACE dependent test/example programmes.

test0a: test0a.c al0.h $(SRC0) $(SRC0A)
	$(CC) $(FLAGS) -o test0a test0a.c $(SRC0)

ex0a: ex0a.c al0.h $(SRC0) $(SRC0A)
	$(CC) $(FLAGS) -o ex0a ex0a.c $(SRC0)

ex0d: ex0d.c al0.h $(SRC0) $(SRC0A)
	$(CC) $(FLAGS) -o ex0d ex0d.c $(SRC0)

ex1a: ex1a.c al1.h $(SRC1) al0.h $(SRC0) $(SRC0A)
	$(CC) $(FLAGS) -o ex1a ex1a.c $(SRC1) $(SRC0)

ex1d: ex1d.c al1.h $(SRC1) al0.h $(SRC0) $(SRC0A)
	$(CC) $(FLAGS) -o ex1d ex1d.c $(SRC1) $(SRC0)

# Machine/OS test programmes.
# Add -O1/O2/O3 for test7.c to test the effects of optimisation.

test3: test3.c
	$(CC) -o test3 test3.c

test4: test4.c
	$(CC) -o test4 test4.c

test5: test5.c
	$(CC) -o test5 test5.c

test7: test7.c
	$(CC) -o test7 test7.c

# tidy up ...

clean:
	rm -rf *~ ace
	rm -rf test0a ex0a ex0d ex1a ex1d
	rm -rf test3 test4 test5 test7

